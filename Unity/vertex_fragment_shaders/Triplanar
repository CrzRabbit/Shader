Shader "Unity/vertex_fragment_shaders"
{
    Properties
    {
        _MainTex("MainTex", 2D) = "white" {}
        _Tiling("Tiling", float) = 1.0
        _Occlusion("Occlusion", 2D) = "white" {}
    }

    SubShader
    {
        Pass
        {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct v2f
            {
                float3 objNormal : TEXCOORD0;
                float3 coords : TEXCOORD1;
                float2 uv : TEXCOORD2;
                float4 pos : SV_POSITION;
            };

            sampler2D _MainTex;
            float _Tiling;
            sampler2D _Occlusion;

            v2f vert(float4 pos : POSITION, float3 normal : NORMAL, float2 uv : TEXCOORD0)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(pos);
                o.coords = o.pos.xyz * _Tiling;
                o.objNormal = normal;
                o.uv = uv;
                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {
                //use absolute value of normal as texture weights
                float3 blend = abs(i.objNormal);
                //make sure the weights sum up to 1
                blend /= dot(blend, 1.0);
                //read thre three texture projections, for x,y,z axes
                fixed4 cx = tex2D(_MainTex, coords.yz);
                fixed4 cy = tex2D(_MainTex, coords.xz);
                fixed4 cz = tex2D(_MainTex, coords,xy);
                //blend the textures based on weights
                fixed4 c = cx * blend.x + cy * blend.y + cz * blend.z;
                c *= tex2D(_Occlusion, i.uv);
                return c;
            }

            ENDCG
        }
    }
}